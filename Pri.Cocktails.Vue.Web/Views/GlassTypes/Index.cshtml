@{
    ViewData["Title"] = "Home Page";
}


<div id="app" class="mx-auto p-5 d-flex flex-column">
    <div class="mb-3 w-100">
        <a type="button" class="btn btn-success ms-4" href="glassTypes/create">Create glass Type</a>
    </div>
    <div v-if="error" class="alert alert-danger m-auto w-25" role="alert">
        <span class="text-danger">{{errorMessage}}</span>
    </div>   
    <div>
        <article v-if="isLoaded">
            <section v-for="glassType in glassTypes" class="glassTypes flex-column p-2">
                <div class="mb-2">
                    <input type="button" v-on:click.prevent="deleteGlassType(glassType.id)" class="btn btn-danger" value="Delete">
                    <input type="button" v-on:click="updateGlassType(glassType.id)" class="btn btn-primary" value="Update">
                </div>
                <div class="glassType-index">
                    <img class="ingredient-index-image" v-bind:src="glassType.picture" />
                    <h3>{{glassType.name}}</h3>
                </div>

            </section>
        </article>
        <div v-else class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>

</div>

@section scripts{
    <script>
var glassTypesApiURL = 'https://localhost:44394/api/GlassTypes';
let token = localStorage.getItem('token');
var axiosConfig = { headers: { Authorization: `Bearer ${token}` } };
var ingredients = new Vue({
el: '#app',
data: {  
    glassTypes: null,
    error: false,
    errorMessage: "",
    glassTypeIsDeleted:false,
    isLoaded : false,
},
    created: async function () {
        if (token == null) {
            window.location.href = "/account/login";
        }
        this.glassTypes = await this.getGlassTypes();
    },
methods: {
    getGlassTypes: async function () {
        let response = "";
        response = await axios.get(glassTypesApiURL)
            .then(response => response)
            .catch(error => {
                console.log(error);
                this.error = true;
            })
            .finally(() => { this.isLoaded = true; })
        if (this.error == false) {
            return response.data;
        }
    },
    deleteGlassType: async function (id) {
        this.error = false;
        this.errorMessage = "";
        const axiosConfig = {
            headers: { Authorization: `Bearer ${token}` },
            params: {
                ID: id
            },
        };
        await axios.delete(glassTypesApiURL, axiosConfig)
            .then(response => response)
            .catch(error => {
                this.error = true;
                this.errorMessage = error.response.data[0].errorMessage;
            })
        if (this.error == false) {
            this.glassTypeIsDeleted = true
            this.glassTypes = await this.getGlassTypes();
        }

    },
    updateGlassType: function (id) {
        window.location.href =`glassTypes/update/${id}`
    }
}
});
    </script>
}